<?php
if (!defined('MALWARECHECK_VERSION')) die('No access');

class App {
	private $scanner;
	private $logger;

	private $checkPath = '';

	public static function init() {
		return new App;
	}

	public static function profile($message) {
		print ("<tt>". memory_get_usage()." - ".$message."</tt><br />\n");
	}

	public function __construct() {
		$this->scanner = new Scanner;
		$this->logger = Logger::instance();

		$this->logger->log('App initialized');
	}

	public function check($path) {
		$this->logger->log('Check path \''.$path.'\'');
		$this->checkPath = realpath($path);
		$this->scanner->walkPath($path);
	}

	public function getCheckPath() {
		return $this->checkPath;
	}

	public function getScanner() {
		return $this->scanner;
	}

	public function log($message, $severity=LogLevel::INFO) {
		$this->logger->log($message, $severity);
	}

	public function renderLog($minimalSeverity=LogLevel::INFO) {
		$output = "<table class='table table-striped table-condensed'>\n";
		foreach ($this->logger->getMessages() as $logItem) {
			if (Logger::getSeverityByLevel($logItem['severity'])
				> Logger::getSeverityByLevel($minimalSeverity)) {
				continue;
			}

			$output .= "\t<tr>\n"
				."\t\t<td>".$logItem['time']."</td>\n"
				."\t\t<td>".$logItem['message']."</td>\n"
				."\t\t<td>".$logItem['severity']."</td>\n"
				."\t</tr>\n";
		}
		$output .= "</table>\n";
		return $output;
	}

	public function renderFilesFound() {
		$output = "<div class='panel panel-default'>\n"
			."\t<div class='panel-heading'>Files found</div>\n"
			."\t<div class='panel-body'>This table lists the files found by the script.</div>\n"
			."<table class='table table-striped table-condensed'>\n"
			."\t<thead>\n"
			."\t\t<tr>\n"
			."\t\t\t<th>File</th>\n"
			."\t\t\t<th>Info</th>\n"
			."\t\t\t<th>Action</th>\n"
			."\t\t</tr>\n"
			."\t</thead>\n"
			."\t<tbody>\n";
		$rowId = 0;
		$filesToCheck = $this->scanner->getFilesToCheck();
		foreach ($this->scanner->getFilesFound() as $file) {
			$output .= "\t<tr>\n"
				."\t\t<td>".$file['hit']."</td>\n"
				."\t\t<td>".$filesToCheck[$file['hit']]['description']."</td>\n"
				."\t\t<td><a class='btn btn-default btn-xs' data-toggle='collapse' href='#collapser-file-".$rowId."'>action</a></td>\n"
				."\t</tr>\n"
				."\t<tr class='collapse' id='collapser-file-".$rowId."'>\n"
				."\t\t<td colspan='4'>Path: <tt>".$file['path']."</tt><br />\n"
				."\t\t\t<div class='info'>".$filesToCheck[$file['hit']]['info']."</div>\n"
				."\t\t</td>\n"
				."\t\t</tr>\n";
			$rowId++;
		}
		$output .= "\t</tbody>\n"
			."</table>\n"
			."</div>\n";

		return $output;
	}

	public function renderPatternsFound() {
		$output = "<div class='panel panel-default'>\n"
			."\t<div class='panel-heading'>Patterns found</div>\n"
			."\t<div class='panel-body'>This table lists the patterns found by the script.</div>\n"
			."<table class='table table-striped table-condensed'>\n"
			."\t<thead>\n"
			."\t\t<tr>\n"
			."\t\t\t<th>Pattern</th>\n"
			."\t\t\t<th>Hits</th>\n"
			."\t\t\t<th>Info</th>\n"
			."\t\t\t<th>Action</th>\n"
			."\t\t</tr>\n"
			."\t</thead>\n"
			."\t<tbody>\n";
		$rowId = 0;
		$patternsToCheck = $this->scanner->getPatternsToCheck();
		foreach ($this->scanner->getPatternsFound() as $pattern) {
			$output .= "\t<tr>\n"
				."\t\t<td>".$pattern['hit']."</td>\n"
				."\t\t<td>".$pattern['count']."</td>\n"
				."\t\t<td>".$patternsToCheck[$pattern['hit']]['description']."</td>\n"
				."\t\t<td><a class='btn btn-default btn-xs' data-toggle='collapse' href='#collapser-pattern".$rowId."'>action</a></td>\n"
				."\t</tr>\n"
				."\t<tr class='collapse' id='collapser-pattern".$rowId."'>\n"
				."\t\t<td colspan='4'><div class='info'>\n"
				."\t\t\tPath: <tt>".$pattern['path']."</tt><br />\n"
				."\t\t\tFile type: <tt>".$pattern['filetype']."</tt><br />\n"
				."\t\t\tLast modified: <tt>".$pattern['lastModified']."</tt><br />\n";

			foreach ($pattern['lines'] as $line) {
				$output .= $line;
			}

			$output .= "\t\t\t".$patternsToCheck[$pattern['hit']]['info']."\n"
				."\t\t</div></td>\n"
				."\t\t</tr>\n";
			$rowId++;
		}
		$output .= "\t</tbody>\n"
			."</table>\n"
			."</div>\n";

		return $output;
	}

	public function setScanner($scanner) {
		$this->scanner = $scanner;
	}
}
