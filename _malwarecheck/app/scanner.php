<?php
if (!defined('MALWARECHECK_VERSION')) die('No access');

class Scanner {
	private $logger;
	private $wordpressChecker;

	private $filesToCheck = array();	// Filenames to include in scanning process
	private $filesFound = array();		// Array of files found with listing in filenames array
	private $filesScannedCount = 0;		// Count of scanned files
	private $filesScannedEmptyCount = 0;	// Count of empty files

	private $directoriesToIgnore = array();	// Directories to skip in walking stage
	private $directoriesIgnored = array();	// Directories actually ignored
	private $directoriesIgnoredCount = 0;	// Count of ignored directories
	private $directoriesScannedCount = 0;	// Total directories scanned

	private $patternsToCheck = array();	// Patterns to check file contents for
	private $patternsFoundCount = 0;	// Count for found patterns
	private $patternsFound = array();	// Array of patterns that were found in file contents

	private $wordpressFileHashErrors = 0;	// Hash errors of Wordpress files

	public function __construct() {
		$this->logger = Logger::instance();
		$this->wordpressChecker = WordpressChecker::init();
		$this->wordpressChecker->run();
	}

	public function addFileToCheck($filename, $description, $info) {
		$this->filesToCheck[$filename] = array(
			'description' => $description,
			'info' => $info,
		);
	}
	public function addDirectoryToIgnore($directory, $description) {
		$this->directoriesToIgnore[$directory] = array(
			'description' => $description,
		);
	}
	public function addPatternToCheck($pattern, $description, $info) {
		$this->patternsToCheck[$pattern] = array(
			'description' => $description,
			'info' => $info,
		);
	}

	public function calculateLineNumber($offset, $content) {
		if ($offset <= 0) return 0;
		list($firstPart) = str_split($content, $offset); // fetches all the text before the match
		$lineNumber = strlen($firstPart) - strlen(str_replace("\n", "", $firstPart)) + 1;
		return $lineNumber;
	}

	public function checkFilename($path) {
		$filename = pathinfo($path, PATHINFO_BASENAME);
	
		if (isset($this->filesToCheck[$filename])) {
			$this->logger->log('Marked file found: '.$path);
			$this->filesFound[] = array(
				'hit' => $filename,
				'path' => $path,
			);
		}
	}

	public function checkPatterns($path) {
		$content = file_get_contents($path);
		if ( ! $content) {
			$this->logger->log('Error could not check: '.$path);
			return;
		}

		foreach ($this->patternsToCheck as $pattern=>$patternData) {
			/* RegExp
			 * i - case-insensitive
			 * s - dot matches also newlines
			 * S - optimization
			 */
			preg_match_all('#'.$pattern.'#isS', $content, $matches, PREG_OFFSET_CAPTURE);

			if ( empty($matches[0]) ) {
				continue; // Pattern not found
			}

			$patternMatchesCount = count($matches[0]);
			$this->patternsFoundCount += $patternMatchesCount;

			$this->logger->log('Pattern found: '.$pattern);

			$lines = array();

			foreach($matches[0] as $match) {
				$lineNumber = $this->calculateLineNumber($match[1], $content);
				$line = "<span class='offset'>Line #: ".$lineNumber."</span>";
				$line .= "<pre class='prettyprint'>...".htmlentities(substr($content, $match[1]-10, 200), ENT_QUOTES)."...</pre>\n";
				$lines[] = $line;
			}

			$this->patternsFound[] = array(
				'hit' => $pattern,
				'path' => $path,
				'count' => $patternMatchesCount,
				'lines' => $lines,
				'filetype' => filetype($path),
				'lastModified' => date (DATE_ATOM, filemtime($path)),
			);
			unset($matches);
		}
		unset($content);
	}

	public function checkWordpress($path, $filename) {
		if ( ! $this->wordpressChecker->isValidHash($path, $filename)) {
			$this->wordpressFileHashErrors++;
		}

	}

	public function getDirectoriesIgnoredCount() {
		return $this->directoriesIgnoredCount;
	}
	public function getDirectoriesScannedCount() {
		return $this->directoriesScannedCount;
	}
	public function getFilesFound() {
		return $this->filesFound;
	}
	public function getFilesScannedCount() {
		return $this->filesScannedCount;
	}
	public function getFilesScannedEmptyCount() {
		return $this->filesScannedEmptyCount;
	}
	public function getPatternsFound() {
		return $this->patternsFound;
	}
	public function getPatternsFoundCount() {
		return $this->patternsFoundCount;
	}
	public function getFilesToCheck() {
		return $this->filesToCheck;
	}
	public function getPatternsToCheck() {
		return $this->patternsToCheck;
	}
	public function getWordpressFileHashErrors() {
		return $this->wordpressFileHashErrors;
	}

	public function haveToIgnoreDirectory($directory, $itemPath) {
		if ($directory == "." || $directory == "..") return true;
		if (isset($this->directoriesToIgnore[$directory])) {
			$this->directoriesIgnoredCount++;
			$this->directoriesIgnored[] = $itemPath;
			return true;
		}
		return false;
	}

	public function isEmptyFile($path) {
		if ( ! filesize($path)) {
			$this->filesScannedEmptyCount++;
			$this->logger->log('Empty file ignored ('.$path.')', LogLevel::DEBUG);
			return true;
		}
		return false;
	}

	public function scanFile($path) {
		$this->filesScannedCount++;
		if ($this->isEmptyFile($path)) {
			return;
		}
	
		$this->checkFilename($path);
		$this->checkPatterns($path);
	}

	public function walkPath($path) {
		$this->directoriesScannedCount++;
		$realPath = realpath($path);
		if ( ! $realPath) {
			$this->logger->log('Full path could not be retrieved',LogLevel::ERROR);
			return;
		}
		$this->logger->log('Walking path: \''.$realPath.'\'', LogLevel::DEBUG);

		$directoryList = scandir($realPath);
		if ( ! $directoryList) {
			$this->logger->log('Directory scan failed for '.$realPath, LogLevel::WARNING);
			return;
		}

		$this->logger->log('Item count '.count($directoryList).' for '.$realPath, LogLevel::DEBUG);

		foreach($directoryList as $directoryItem) {
			$itemPath = $realPath.'\\'.$directoryItem;

			if ($this->haveToIgnoreDirectory($directoryItem, $itemPath)) {
				continue;
			}

			if (is_file($itemPath)) {
				$this->scanFile($itemPath);
				if (defined('WORDPRESS_CHECKER')) {
					$this->checkWordpress($itemPath, $directoryItem);
				}
			}
			else {
				$this->walkPath($itemPath); // Recursive walking
			}
		}
	}
}
?>
